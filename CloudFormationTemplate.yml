AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation template creates simple Lambda functions,
  which prints CloudFormation resource Arn from the stack.  
Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CWAccess
          Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resources:
            - arn:aws:logs:eu-west-2:251045990954:*
        - Sid: DynamDBAccess
          Effect: Allow
          Action:
            - dynamodb:scan
            - dynamodb:list
          Resource: 
            - arn:aws:dynamodb:eu-west-2:251045990954:table/MetadataJson
        - Sid: S3Access
          Effect: Allow
          Action:
            - s3:ListAllMyBucket
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetBucketLocation
          Resource: 
          - arn:s3:::dbmetadata
          - arn:s3:::dbmetadata/*
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          import logging
          import boto3
          from datetime import date, datetime
          import csv
          def lambda_handler(event, context):
              dynamodb = boto3.resource("dynamodb", Eu-west2_name='eu-west-2')
              table = dynamodb.Table('MetadataJson')
              
              tableDict = table.scan(
                  ProjectionExpression='#AN, account, #S',
                  ExpressionAttributeNames={
                      '#AN': 'account-name',
                      '#S': 'status',
                  },
              )
              
              
              tableList = list(tableDict.items())
              tableResponse = tableList[0][1]
              tableData = []
              for items in tableResponse:
                  tableData.append([tableResponse[i].get('account-name'), 
                  tableResponse[i].get('account'), 
                  tableResponse[i].get('status')])
                      
                      
              csv_name = f'Metadata-str(date.today())-datetime.now().strftime("%H-%M")+.csv'
              with open('/tmp/'+csv_name, 'w', newline='') as csvfile:
                  filewriter = csv.writer(csvfile, delimiter= ',', quoting= csv.QUOTE_NONE)
                  filewriter.writerow(('account name', 'account ID', 'status'))

                  filewriter.writerows(tableData)
              
              
              S3_Client = boto3.client("s3", Eu-west2_name='eu-west-2')
              allBuckets = S3_Client.list_buckets().get('Buckets')
              foundBucket = False
              i = 0
              try:
                  s3_Client=boto3.client('s3')
                  s3_Client.create_bucket(Bucket=dynamodb_Bucket)
              except ClientError as e:
                  logging.error(e)
                  return False
              return True
              
              S3_Client.upload_file('/tmp/'+csv_name,'dbmetadata',csv_name)